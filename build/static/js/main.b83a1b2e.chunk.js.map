{"version":3,"sources":["components/katman/Header.js","components/TodoItem.js","components/Todos.js","components/EkleTodo.js","components/Gecmis.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","Header","style","to","TodoItem","getStyle","borderBottom","textDecoration","props","todo","completed","this","id","title","type","onChange","isaretle","bind","onClick","silTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","React","EkleTodo","state","onSubmit","e","preventDefault","alert","ekleTodo","setState","target","name","value","display","className","flex","placeholder","Gecmis","App","filter","yeniTodo","uuid","v4","exact","path","render","Fragment","gecmis","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b83a1b2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nfunction Header () {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Yapilacak Liste</h1>\r\n             <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\nconst headerStyle={\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\nconst linkStyle={\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nexport default Header;"," import React, { Component } from 'react';\r\n import PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    //uzerine cizgi cizmek\r\n  getStyle=() =>{\r\n      return{\r\n          background: 'rgba(243, 243, 243, 0.77)',\r\n          padding :'10px',\r\n          borderBottom:'1px #ccc dotted',\r\n          textDecoration:this.props.todo.completed ? 'line-through' :'none',\r\n      }\r\n      \r\n  }\r\n  \r\n // isaretle = (e) =>{\r\n   //   console.log(this.props)\r\n // }\r\n    render() {\r\n        const {id,title}=this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.isaretle.bind(this,id)} />{' '}\r\n                    {title}\r\n                    <button onClick={this.props.silTodo.bind(this,id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes={\r\n    todo: PropTypes.object.isRequired\r\n}\r\nconst btnStyle={\r\n   background:'rgb(84, 37, 42)',\r\n   color: '#fff',\r\n   border: 'none',\r\n   padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n\r\n}\r\n//const itemStyle={\r\n  //  backgroundColor:'#f4f4f4'\r\n//}\r\nexport default TodoItem\r\n","import React from 'react'; \r\nimport TodoItem from'./TodoItem';\r\nimport PropTypes from 'prop-types';\r\nclass Todos extends React.Component {\r\n   // isaretle=() =>{\r\n     //   console.log('Hello')\r\n    //}\r\n    \r\n    render(){ \r\n        return this.props.todos.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo}\r\n            isaretle={this.props.isaretle}\r\n            silTodo ={this.props.silTodo} />\r\n        ));\r\n    }\r\n    \r\n}\r\n//Proptypes\r\nTodos.propTypes={\r\n    todos: PropTypes.array.isRequired\r\n}\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\n\r\nexport class EkleTodo extends Component {\r\n    state ={\r\n        title:''\r\n    }\r\n    onSubmit=(e) =>{\r\n        e.preventDefault();\r\n        if(this.state.title===''){\r\n            return(\r\n                alert(\"Lutfen bir sey giriniz\")\r\n                \r\n            )\r\n        }\r\n        this.props.ekleTodo(this.state.title);\r\n        this.setState({title:''})\r\n    }\r\n    onChange =(e) => this.setState({[e.target.name]: e.target.value});\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                className=\"inpt\"\r\n                style={{flex: '10',padding: '5px'}}\r\n                placeholder=\"Yapilacak Listeye ekle ...\"\r\n                value={this.state.title} \r\n                onChange={this.onChange} />\r\n                <input\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n                className=\"btn\"\r\n                style={{flex: '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EkleTodo\r\n","import React from 'react'; \r\nimport TodoItem from'./TodoItem';\r\nimport PropTypes from 'prop-types';\r\nclass Gecmis extends React.Component {\r\n   // isaretle=() =>{\r\n     //   console.log('Hello')\r\n    //}\r\n    \r\n    render(){ \r\n        return this.props.todos.map((todo) => (\r\n            <h3>{todo.title}</h3>\r\n        ));\r\n    }\r\n    \r\n}\r\n//Proptypes\r\nGecmis.propTypes={\r\n    gecmis: PropTypes.array.isRequired\r\n}\r\nexport default Gecmis;\r\n","import React from 'react';\nimport Header from './components/katman/Header';\nimport Todos from './components/Todos';\n//import Gecmis from './components/Gecmis';\nimport {BrowserRouter as Router,Route} from'react-router-dom';\nimport EkleTodo from './components/EkleTodo';\nimport uuid from 'uuid';\nimport './App.css';\nimport Gecmis from './components/Gecmis';\n\nclass App extends React.Component {\n  state = {\n    todos: [\n      \n    ]\n  }\n  //checkbox isaretlemek icin\n  isaretle = (id) =>{\n    this.setState({todos:this.state.todos.map(todo =>{\n      if(todo.id === id){\n        todo.completed= !todo.completed\n      }\n      return todo;\n    })})\n  }\n  \n  //Silmek icin\n  silTodo= (id) =>{\n    this.setState({todos:[...this.state.todos.filter(todo=> todo.id!== id)]});\n  }\n\n  //Eklemek icin\n  ekleTodo=(title) =>{\n    const yeniTodo= {\n        id:uuid.v4(),\n        title,\n        completed:false\n    }\n    this.setState({todos:[...this.state.todos, yeniTodo]});\n  }\n\n  render(){ \n    return(\n\n      <Router>\n    <div className=\"App\">\n      <div className=\"container\">\n        \n        <Header />\n        <Route exact path=\"/\" render={props =>(\n          <React.Fragment>\n            <EkleTodo ekleTodo={this.ekleTodo}/>\n            <Todos todos={this.state.todos} \n            isaretle={this.isaretle}\n            silTodo={this.silTodo}/>\n            <Gecmis gecmis={this.state.todos}/>\n            \n            </React.Fragment>\n            \n        )} />\n        \n        <Route exact path=\"/about\" render={props =>(\n          <React.Fragment>\n            <Gecmis />\n            </React.Fragment>\n            \n        )} />\n        \n    \n          \n      </div>\n    </div>\n    </Router>\n    \n  );\n\n\n  \n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}